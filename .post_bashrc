#!/usr/bin/env bash

# -----------------------------------------------------------
# Shell strict mode for scripts — do not apply to interactive shells
# -----------------------------------------------------------
if [[ $- != *i* ]]; then
    # We are in a non-interactive shell (likely a script)
    set -euo pipefail
fi

# ─────────────────────────────────────────────
# Utility functions
# ─────────────────────────────────────────────

about() {
    clear

    local args=()

    if [ $# -eq 0 ]; then
        echo -n "What commands are you asking about?> "
        read -r input
        read -ra args <<<"$input" # Split input into array
    else
        args=("$@")
    fi

    echo "command (builtin)    - prints a description for the command"
    echo "type (builtin)       - indicate how it would be interpreted if used as a command name"
    whatis whatis || true
    whatis which || true
    echo

    for cmd in "${args[@]}"; do
        if ! command_exists "$cmd" >/dev/null 2>&1; then
            command_exists_debug "$cmd"
            continue
        fi
        echo "🔍 Command: $cmd"

        echo -n "📄 type:    "
        type_result=$(type -t "$cmd" || true)
        type -t "$cmd" || echo "Not found"

        echo -n "❓ whatis:  "
        if ! whatis "$cmd" 2>/dev/null; then
            echo "No man page info found"
        fi

        echo -n "📍 which:   "
        which "$cmd"

        echo -n "📦 whereis: "
        whereis "$cmd"

        echo "────────────────────────────────────────────────────────────────────"
    done
}

add_path_if_exists() {
    local position="$1"
    shift

    local dir resolved  # Declare function-local variables

    for dir in "$@"; do
        # Expand and validate directory
        if [[ -z "$dir" || ! -d "$dir" ]]; then
            return
        fi
        resolved=$(realpath -m "$dir" 2>/dev/null) || return

        # Already in PATH?
        [[ ":$PATH:" == *":$resolved:"* ]] && return

        # Add to PATH
        case "$position" in
            before) PATH="$resolved:$PATH" ;;
            after)  PATH="$PATH:$resolved" ;;
            *) echo "Invalid position: $position (use 'before' or 'after')" >&2 ;;
        esac
    done
}

#!/usr/bin/env bash
# command_utils.sh — Bash module for command checks and path resolution

# Prevent double-sourcing
if [[ -n "${__COMMAND_UTILS_LOADED:-}" ]]; then return 0; fi
__COMMAND_UTILS_LOADED=1

# Optional debug logging
_log_debug() {
  [[ "${DEBUG:-}" =~ ^(1|true|TRUE)$ ]] && echo "DEBUG: $*" >&2
}

# Return the command type: alias, function, builtin, keyword, or file
command_type() {
  local cmd="$1"
  local kind

  kind=$(type -t "$cmd" 2>/dev/null || true)

  if [[ -z "$kind" ]]; then
    echo "unknown"
    return 1
  fi

  echo "$kind"
  return 0
}

# Check if a command exists and is usable
command_exists() {
  local cmd="$1"
  local resolved kind

  _log_debug "Checking command: $cmd"

  if ! resolved=$(command -v "$cmd" 2>/dev/null); then
    _log_debug "Not found in PATH"
    return 1
  fi

  kind=$(command_type "$cmd")

  _log_debug "Type: $kind, Resolved: $resolved"

  if [[ "$kind" != "file" && "$kind" != "unknown" ]]; then
    return 0  # shell builtin, alias, function, etc.
  fi

  if [[ "$kind" == "file" && -x "$resolved" ]]; then
    return 0  # executable file
  fi

  return 1  # Found but not usable
}

command_exists_debug() {
  local cmd="$1"
  local resolved kind real_target

  # Try to resolve via PATH
  if ! resolved=$(command -v "$cmd" 2>/dev/null); then
    echo "❌ Command '$cmd' not found in PATH"
    return 1
  fi

  # Determine the type
  kind=$(type -t "$cmd" 2>/dev/null || true)
  echo "✅ Found: $cmd"
  echo "   Type: ${kind:-unknown}"
  echo "   Resolved path: $resolved"

  # If it's a regular file, verify it's executable
  if [[ "$kind" == "file" ]]; then
    if [ ! -x "$resolved" ]; then
      echo "⚠️  Not executable: $resolved"
      return 1
    fi

    # Detect and resolve symlink
    if [ -L "$resolved" ]; then
      real_target=$(readlink -f "$resolved" 2>/dev/null || realpath "$resolved" 2>/dev/null || echo "Unable to resolve")
      echo "   🔗 Symlink target: $real_target"
    fi
  fi

  return 0
}


link_scripts_in_dir() {
    local original_dir="$1"
    local target_dir="$2"
    local chmod_mode="$3"

    mkdir -p "${target_dir}"

    if [ ! -d "${original_dir}" ]; then
        echo "❌ Original directory does not exist: ${original_dir}"
        return 1
    fi

    if [ ! -w "${target_dir}" ]; then
        echo "❌ Target directory is not writable: ${target_dir}"
        return 1
    fi

    shopt -s nullglob
    local files=("${original_dir}"/*.sh)
    shopt -u nullglob

    if [ ${#files[@]} -eq 0 ]; then
        echo "ℹ️  No .sh files found in ${original_dir}"
        return 0
    fi

    for file in "${files[@]}"; do
        [[ -f "$file" ]] || {
            echo "⚠️  Not a regular file: $file"
            continue
        }

        grep -q '^#!' "$file" || {
            echo "⚠️  Missing shebang: $file"
            continue
        }

        local command_file
        command_file=$(basename -- "${file}" .sh)

        chmod "${chmod_mode}" "$file"
        ln -sf "${file}" "${target_dir}/${command_file}"
    done

    for file in "${original_dir}"/*; do
        [[ -d "$file" || "$file" == *.sh ]] && continue
        ls -l "$file"
    done

    ls -lL "${target_dir}"
    echo "✅ Symbolic links created in ${target_dir} for all .sh files in ${original_dir}"
}

# Resolve symlinks to get the actual file path
resolve_command_path() {
  local cmd="$1"

  if ! command_exists "$cmd"; then
    echo "❌ '$cmd' not found or not executable" >&2
    return 1
  fi

  local resolved
  resolved=$(command -v "$cmd")

  if [ -L "$resolved" ]; then
    resolved=$(readlink -f "$resolved" 2>/dev/null || realpath "$resolved" 2>/dev/null || echo "$resolved")
  fi

  echo "$resolved"
}


finish_dotfile_test() {
    local name="$1"
    local sources=("${BASH_SOURCE[@]:1}")  # Skip this function itself
    echo -e "finish_dotfile_test started at: $(date)"
    (IFS=' '; echo "This script           : ${sources[0]}")
    echo -e "\$name=$name"
    echo -e "\$TEST_DOTFILE_NAME=$TEST_DOTFILE_NAME"
    echo -e "finish_dotfile_test finished at: $(date)"
    if [[ "$name" == "$TEST_DOTFILE_NAME" ]]; then
        echo -e "🛑 Exiting"
        exit
    fi
}

# Detect if we're being run as part of VS Code's userEnvProbe
is_user_env_probe() {
    ps -eo pid,ppid,args | awk '
        NR > 1 {
            pid[$1] = $2
            cmd[$1] = substr($0, index($0,$3))
        }
        END {
            p = ENVIRON["PPID"]
            while (p > 1) {
                if (cmd[p] ~ /userEnvProbe/) exit 0
                p = pid[p]
            }
            exit 1
        }
    '
}

# Lazy-load nvm (significant speed improvement)
nvm() {
    unset -f nvm
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
    nvm "$@"
}

print_path() {
  local i=1
  echo "🔍 Current \$PATH entries:"
  echo "$PATH" | tr ':' '\n' | while read -r dir; do
    if [ -d "$dir" ]; then
      printf "%2d. ✅ %s\n" "$i" "$dir"
    else
      printf "%2d. ❌ %s (not a directory)\n" "$i" "$dir"
    fi
    i=$((i + 1))
  done
}

remove_path() {
  local remove="$1"
  PATH=$(echo "$PATH" | tr ':' '\n' | grep -v -x "$remove" | paste -sd:)
}

# Map of verified safe local commands
declare -A _RUN_LOCAL_SAFE_CACHE=()

run_local() {
    local cmd="$1"
    shift
    local local_cmd="$SYMLINKS_BIN_DIR/$cmd"

    # Check cache first
    if [[ "${_RUN_LOCAL_SAFE_CACHE[$cmd]-}" == "safe" ]]; then
        "$local_cmd" "$@" || {
            echo "⚠️ Command '$cmd' failed. Skipping." >&2
            return 0
        }
        return 0
    fi

    # First-time check
    if [ ! -x "$local_cmd" ]; then
        echo "⚠️ Command '$cmd' not found or not executable in $SYMLINKS_BIN_DIR. Skipping." >&2
        _RUN_LOCAL_SAFE_CACHE["$cmd"]="missing"
        return 0
    fi

    local resolved
    resolved="$(command -v "$cmd" 2>/dev/null || true)"
    if [ "$resolved" != "$local_cmd" ]; then
        echo "⚠️ Command '$cmd' is not resolved to $SYMLINKS_BIN_DIR first in PATH (resolved to $resolved). Skipping." >&2
        _RUN_LOCAL_SAFE_CACHE["$cmd"]="wrong_path"
        return 0
    fi

    # Safe → cache this fact
    _RUN_LOCAL_SAFE_CACHE["$cmd"]="safe"
    "$local_cmd" "$@" || {
        echo "⚠️ Command '$cmd' failed. Skipping." >&2
        return 0
    }
}

start_dotfile_test() {
    echo "start_dotfile_test started at: $(date)"

    echo -e "\$TEST_DOTFILE_NAME=$TEST_DOTFILE_NAME"

    local sources=("${BASH_SOURCE[@]:1}")  # Skip this function itself

    echo "Shell type           : $0"
    echo "Bash version         : $BASH_VERSION"
    (IFS=' '; echo "Call stack           : ${sources[*]}")
    echo "Current options (\$-): $-"

    echo -n "Is interactive?      : [[ \$- == *i* ]] → "
    [[ $- == *i* ]] && echo yes || echo no

    echo -n "Is login shell?      : shopt -q login_shell → "
    shopt -q login_shell && echo yes || echo no

    echo -n "PS1 set?             : declare -p PS1 &>/dev/null → "
    declare -p PS1 &>/dev/null && echo yes || echo no

    echo "TERM_PROGRAM         : ${TERM_PROGRAM:-}"
    echo "Host                 : $(hostname -f 2>/dev/null || hostname)"
    echo "Shell PID            : $$"


    # More portable parent process command
    local parent_pid parent_cmd
    parent_pid=$(ps -o ppid= -p $$ 2>/dev/null)
    parent_cmd=$(ps -o comm= -p "$parent_pid" 2>/dev/null || echo unknown)
    echo "Parent process       : ${parent_cmd}"

    echo "TTY                  : $(tty 2>/dev/null || echo not-a-tty)"

    echo -e "\n--- Environment Variables ---"
    env | sort
    echo -e "\n--- Aliases ---"
    alias
    echo -e "\n--- Functions ---"
    compgen -A function
    echo -e "\n--- start_dotfile_test finished at: $(date)\n"
}

source_if_exists() {
    local file="$1"
    if [ -f "$file" ]; then
        # shellcheck source=/dev/null
        source "$file"
    fi
}

vcode() {
    local base_dir="${HOME}/projects"

    if [[ $# -eq 0 ]]; then
        echo "Usage: vcode [project1 project2 ...] or vcode --all"
        return 0
    fi

    if [[ $# -eq 1 && -f "${VSCODE_WORKSPACE_DIR}/$1.code-workspace" ]]; then
        # Use existing named workspace file
        code "${VSCODE_WORKSPACE_DIR}/$1.code-workspace"
        return 0
    fi

    # Else, build a temporary workspace file
    local tmp_workspace_dir="/tmp/vcode_workspace_$$"
    mkdir -p "$tmp_workspace_dir"
    local workspace_file="${tmp_workspace_dir}/workspace.code-workspace"

    local folders=()

    if [[ "$1" == "--all" ]]; then
        # Include all immediate subdirectories of ~/projects/
        while IFS= read -r -d '' dir; do
            folders+=("{\"path\": \"$dir\"}")
        done < <(find "$base_dir" -mindepth 1 -maxdepth 1 -type d -print0)

        if [[ ${#folders[@]} -eq 0 ]]; then
            echo "⚠️ No subdirectories found under $base_dir"
            return 0
        fi
    else
        # Manually specified projects
        for project in "$@"; do
            local dir="$base_dir/$project"
            if [[ ! -d "$dir" ]]; then
                echo "❌ '$project' does not exist in $base_dir"
                continue
            fi
            folders+=("{\"path\": \"$dir\"}")
        done

        if [[ ${#folders[@]} -eq 0 ]]; then
            echo "🚫 No valid projects to open"
            return 0
        fi
    fi

    # Write workspace JSON
    printf '{\n  "folders": [\n    %s\n  ]\n}\n' "$(
        IFS=,$'\n'
        echo "${folders[*]}"
    )" >"$workspace_file"

    code "$workspace_file"
}

_vcode_autocomplete() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local project_dir="$HOME/projects"
    local projects

    # Only complete if not using --all
    if [[ "$COMP_CWORD" -ge 1 && "${COMP_WORDS[1]}" != --all ]]; then
        projects=$(find "$project_dir" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' 2>/dev/null)
        readarray -t COMPREPLY < <(compgen -W "$projects" -- "$cur")
    fi
}

# ─────────────────────────────────────────────
# Environment variables
# ─────────────────────────────────────────────

set -a

NVM_DIR="$HOME/.nvm"

IS_WSL=false
if grep -qi microsoft /proc/version; then
    IS_WSL=true
fi

if [ "$IS_WSL" = true ]; then
    if command -v cmd.exe >/dev/null 2>&1; then
        WINDOWS_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
    else
        WINDOWS_USER=""
    fi
    VSCODE_SETTINGS_DIR="/mnt/c/Users/$WINDOWS_USER/AppData/Roaming/Code/User"
else
    VSCODE_SETTINGS_DIR="$HOME/.config/Code/User"
fi

# ignore unused variable
# shellcheck disable=SC2034
VSCODE_SETTINGS_FILE="$VSCODE_SETTINGS_DIR/settings.json"

source_if_exists "$HOME/.env"

if declare -p GITHUB_PARENT &>/dev/null; then
    VSCODE_WORKSPACE_DIR="$GITHUB_PARENT/my-vs-code/workspaces"
else
    echo "⚠️ GITHUB_PARENT not set"
fi

SYMLINKS_BIN_DIR="$HOME/.symlinks/bin"

set +a

# ─────────────────────────────────────────────
# Completions
# ─────────────────────────────────────────────

complete -F _vcode_autocomplete vcode

# ─────────────────────────────────────────────
# PATH
# ─────────────────────────────────────────────

remove_path "/usr/games"
remove_path "/usr/local/games"

# before

add_path_if_exists before "$SYMLINKS_BIN_DIR"

#after

# go used for hugo
add_path_if_exists after \
    "/mnt/c/Program Files/Microsoft VS Code/bin" \
    "/usr/local/go/bin" \
    "$HOME/go/bin"



# ─────────────────────────────────────────────
# Aliases
# ─────────────────────────────────────────────

if [[ $- == *i* ]]; then
    # We are in an interactive shell
    alias testlogin='ssh -i ~/.ssh/id_ed25519_testuser testuser@localhost'
fi

declare -p TEST_DOTFILE_NAME &>/dev/null && start_dotfile_test && finish_dotfile_test post_bashrc
# ──────────────────────────────────────────────────────────────
# 🧠 Bash History Cheat Sheet – Rerun & Edit Previous Commands
# ──────────────────────────────────────────────────────────────
# 🔁 Rerun Commands
#   !!             → Rerun last command
#   !n             → Run command number n from `history`
#   !string        → Rerun last command starting with 'string'
#   !^             → First argument of previous command
#   !$             → Last argument of previous command

# ✏️ Modify and Reuse
#   ^old^new       → Replace first 'old' with 'new' in previous command
#   !!:s/old/new/  → Replace first 'old' with 'new'
#   !!:gs/old/new/ → Replace all 'old' with 'new'
#   !n:p           → Print command n without running it
#   fc             → Edit previous command in $EDITOR

# 🔍 History Search
#   Ctrl + r       → Reverse incremental search
#   Ctrl + s       → Forward search (may need `stty -ixon`)
#   Ctrl + g       → Cancel search
#   Esc            → Drop into prompt with matched command

# 🧪 Example
#   $ echo hellp
#   $ ^hellp^hello   → Corrects and reruns as: echo hello
#   $ !ls            → Repeats last command starting with 'ls'

# ──────────────────────────────────────────────────────────────


