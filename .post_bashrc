#!/usr/bin/env bash

# Prevent double-sourcing
if [[ -n "${__POST_BASHRC_LOADED:-}" ]]; then return 0; fi
__POST_BASHRC_LOADED=1

# ─────────────────────────────────────────────
# Environment variables
# ─────────────────────────────────────────────
set_post_bashrc_environment() {
    set -a

    local env_file="$HOME/.env"

    # shellcheck source=/dev/null
    if [ -f "$env_file" ]; then
        source "$env_file"
    else
        echo "Missing .env file"
        return 1
    fi

    NVM_DIR="$HOME/.nvm"

    IS_WSL=false
    if grep -qi microsoft /proc/version; then
        IS_WSL=true
    fi

    if [ "$IS_WSL" = true ]; then
        if command -v cmd.exe >/dev/null 2>&1; then
            WINDOWS_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
        else
            WINDOWS_USER=""
        fi
        VSCODE_SETTINGS_DIR="/mnt/c/Users/$WINDOWS_USER/AppData/Roaming/Code/User"
    else
        VSCODE_SETTINGS_DIR="$HOME/.config/Code/User"
    fi

    # ignore unused variable
    # shellcheck disable=SC2034
    VSCODE_SETTINGS_FILE="$VSCODE_SETTINGS_DIR/settings.json"

    if declare -p GITHUB_PARENT &>/dev/null; then
        # shellcheck disable=SC2034
        VSCODE_WORKSPACE_DIR="$GITHUB_PARENT/my-vs-code/workspaces"
        # shellcheck disable=SC2034
        GITHUB_DOTFILES_DIR="$GITHUB_PARENT/dotfiles"
    else
        echo "⚠️ GITHUB_PARENT not set"
    fi

    local symlinks_dir="$HOME/.symlinks"
    SYMLINKS_BIN_DIR="$symlinks_dir/bin"
    SYMLINKS_SOURCE_DIR="$symlinks_dir/source"

    set +a
}

if declare -F set_post_bashrc_environment >/dev/null; then
    if ! set_post_bashrc_environment; then
        echo "❌ Environment setup failed"
        return 1
    fi
else
    echo "⚠️  set_post_bashrc_environment is not defined"
    return 1
fi

source_bash_functions() {
    if [[ -n "${SYMLINKS_SOURCE_DIR:-}" ]]; then
        local bf_file="$SYMLINKS_SOURCE_DIR/bash_functions"

        if [ -f "$bf_file" ]; then
            # shellcheck source=/dev/null
            source "$bf_file"
        else
            echo "⚠️ Missing file: $bf_file"
        fi
    else
        echo "⚠️ SYMLINKS_SOURCE_DIR not set – skipping bash_functions"
    fi
}
source_bash_functions

# ─────────────────────────────────────────────
# Utility functions
# ─────────────────────────────────────────────

finish_dotfile_test() {
    local name="$1"
    local sources=("${BASH_SOURCE[@]:1}") # Skip this function itself
    echo -e "finish_dotfile_test started at: $(date)"
    (
        IFS=' '
        echo "This script           : ${sources[0]}"
    )
    echo -e "\$name=$name"
    echo -e "\$TEST_DOTFILE_NAME=$TEST_DOTFILE_NAME"
    echo -e "finish_dotfile_test finished at: $(date)"
    if [[ "$name" == "$TEST_DOTFILE_NAME" ]]; then
        echo -e "🛑 Exiting"
        exit
    fi
}

# Map of verified safe local commands
declare -A _RUN_LOCAL_SAFE_CACHE=()

run_local() {
    local cmd="$1"
    shift
    local local_cmd="$SYMLINKS_BIN_DIR/$cmd"

    # Check cache first
    if [[ "${_RUN_LOCAL_SAFE_CACHE[$cmd]-}" == "safe" ]]; then
        "$local_cmd" "$@" || {
            echo "⚠️ Command '$cmd' failed. Skipping." >&2
            return 0
        }
        return 0
    fi

    # First-time check
    if [ ! -x "$local_cmd" ]; then
        echo "⚠️ Command '$cmd' not found or not executable in $SYMLINKS_BIN_DIR. Skipping." >&2
        _RUN_LOCAL_SAFE_CACHE["$cmd"]="missing"
        return 0
    fi

    local resolved
    resolved="$(command -v "$cmd" 2>/dev/null || true)"
    if [ "$resolved" != "$local_cmd" ]; then
        echo "⚠️ Command '$cmd' is not resolved to $SYMLINKS_BIN_DIR first in PATH (resolved to $resolved). Skipping." >&2
        _RUN_LOCAL_SAFE_CACHE["$cmd"]="wrong_path"
        return 0
    fi

    # Safe → cache this fact
    _RUN_LOCAL_SAFE_CACHE["$cmd"]="safe"
    "$local_cmd" "$@" || {
        echo "⚠️ Command '$cmd' failed. Skipping." >&2
        return 0
    }
}

start_dotfile_test() {
    echo "start_dotfile_test started at: $(date)"

    echo -e "\$TEST_DOTFILE_NAME=$TEST_DOTFILE_NAME"

    local sources=("${BASH_SOURCE[@]:1}") # Skip this function itself

    echo "Shell type           : $0"
    echo "Bash version         : $BASH_VERSION"
    (
        IFS=' '
        echo "Call stack           : ${sources[*]}"
    )
    echo "Current options (\$-): $-"

    echo -n "Is interactive?      : [[ \$- == *i* ]] → "
    [[ $- == *i* ]] && echo yes || echo no

    echo -n "Is login shell?      : shopt -q login_shell → "
    shopt -q login_shell && echo yes || echo no

    echo -n "PS1 set?             : declare -p PS1 &>/dev/null → "
    declare -p PS1 &>/dev/null && echo yes || echo no

    echo "TERM_PROGRAM         : ${TERM_PROGRAM:-}"
    echo "Host                 : $(hostname -f 2>/dev/null || hostname)"
    echo "Shell PID            : $$"

    # More portable parent process command
    local parent_pid parent_cmd
    parent_pid=$(ps -o ppid= -p $$ 2>/dev/null)
    parent_cmd=$(ps -o comm= -p "$parent_pid" 2>/dev/null || echo unknown)
    echo "Parent process       : ${parent_cmd}"

    echo "TTY                  : $(tty 2>/dev/null || echo not-a-tty)"

    echo -e "\n--- Environment Variables ---"
    env | sort
    echo -e "\n--- Aliases ---"
    alias
    echo -e "\n--- Functions ---"
    compgen -A function
    echo -e "\n--- start_dotfile_test finished at: $(date)\n"
}

# ─────────────────────────────────────────────
# Completions
# ─────────────────────────────────────────────

complete -F _vcode_autocomplete vcode

# ─────────────────────────────────────────────
# PATH
# ─────────────────────────────────────────────

remove_path "/usr/games"
remove_path "/usr/local/games"

# before

add_path_if_exists before "$SYMLINKS_BIN_DIR"

#after

# go used for hugo
add_path_if_exists after \
    "/mnt/c/Program Files/Microsoft VS Code/bin" \
    "/usr/local/go/bin" \
    "$HOME/go/bin"

# ─────────────────────────────────────────────
# Aliases
# ─────────────────────────────────────────────

if [[ $- == *i* ]]; then
    # We are in an interactive shell
    alias test_bash_functions='source "$HOME/.symlinks/source/test_bash_functions" &>/tmp/test_bash_functions.log'
    alias testlogin='ssh -i ~/.ssh/id_ed25519_testuser testuser@localhost'
fi

declare -p TEST_DOTFILE_NAME &>/dev/null && start_dotfile_test && finish_dotfile_test post_bashrc
# ──────────────────────────────────────────────────────────────
# 🧠 Bash History Cheat Sheet – Rerun & Edit Previous Commands
# ──────────────────────────────────────────────────────────────
# 🔁 Rerun Commands
#   !!             → Rerun last command
#   !n             → Run command number n from `history`
#   !string        → Rerun last command starting with 'string'
#   !^             → First argument of previous command
#   !$             → Last argument of previous command

# ✏️ Modify and Reuse
#   ^old^new       → Replace first 'old' with 'new' in previous command
#   !!:s/old/new/  → Replace first 'old' with 'new'
#   !!:gs/old/new/ → Replace all 'old' with 'new'
#   !n:p           → Print command n without running it
#   fc             → Edit previous command in $EDITOR

# 🔍 History Search
#   Ctrl + r       → Reverse incremental search
#   Ctrl + s       → Forward search (may need `stty -ixon`)
#   Ctrl + g       → Cancel search
#   Esc            → Drop into prompt with matched command

# 🧪 Example
#   $ echo hellp
#   $ ^hellp^hello   → Corrects and reruns as: echo hello
#   $ !ls            → Repeats last command starting with 'ls'

# ──────────────────────────────────────────────────────────────
