#!/bin/bash
set -euo pipefail

# Further testing of source-bash required
# shellcheck source=/dev/null
#source "$HOME/.local/bin/source-bash"

add_path_if_exists() {
    local position="$1" dir="$2"
    if [ -d "$dir" ] && [[ ":$PATH:" != *":$dir:"* ]]; then
        case "$position" in
        before) PATH="$dir:$PATH" ;;
        after) PATH="$PATH:$dir" ;;
        *) echo "Invalid position: $position (use 'before' or 'after')" >&2 ;;
        esac
    fi
}

source_if_exists() {
    local file="$1"
    if [ -f "$file" ]; then
        # shellcheck source=/dev/null
        source "$file"
    fi
}

vcode() {
    local base_dir="${HOME}/projects"
    local tmp_workspace_dir="/tmp/vcode_workspace_$$"
    mkdir -p "$tmp_workspace_dir"
    local workspace_file="${tmp_workspace_dir}/workspace.code-workspace"

    if [[ $# -eq 0 ]]; then
        echo "Usage: vcode [project1 project2 ...] or vcode --all"
        return 1
    fi

    local folders=()

    if [[ "$1" == "--all" ]]; then
        # Automatically include all Git repos under ~/projects/
        while IFS= read -r -d '' dir; do
            folders+=("{\"path\": \"$dir\"}")
        done < <(find "$base_dir" -mindepth 1 -maxdepth 1 -type d -exec test -d "{}/.git" \; -print0)

        if [[ ${#folders[@]} -eq 0 ]]; then
            echo "⚠️ No Git repositories found under $base_dir"
            return 1
        fi
    else
        # Manually specified projects
        for project in "$@"; do
            local dir="$base_dir/$project"
            if [[ ! -d "$dir" ]]; then
                echo "❌ '$project' does not exist in $base_dir"
                continue
            elif [[ ! -d "$dir/.git" ]]; then
                echo "⚠️ '$project' is not a Git repo"
            fi
            folders+=("{\"path\": \"$dir\"}")
        done

        if [[ ${#folders[@]} -eq 0 ]]; then
            echo "🚫 No valid projects to open"
            return 1
        fi
    fi

    # Create temporary workspace file
    printf '{\n  "folders": [\n    %s\n  ]\n}\n' "$(
        IFS=,$'\n'
        echo "${folders[*]}"
    )" >"$workspace_file"

    code "$workspace_file"
}

_vcode_autocomplete() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local project_dir="$HOME/projects"
    local projects

    # Only complete if not using --all
    if [[ "$COMP_CWORD" -ge 1 && "${COMP_WORDS[1]}" != --all ]]; then
        projects=$(compgen -W "$(find "$project_dir" -mindepth 1 -maxdepth 1 -type d -printf '%f\n')" -- "$cur")
        COMPREPLY=($projects)
    fi
}

complete -F _vcode_autocomplete vcode

add_path_if_exists before "$HOME/.local/bin"

# Do I really need go?
#add_path_if_exists after "/usr/local/go/bin"
#add_path_if_exists after "$HOME/go/bin"

set -a

IS_WSL=false
if grep -qi microsoft /proc/version; then
    IS_WSL=true
fi

if [ "$IS_WSL" = true ]; then
    WINDOWS_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r')
    VSCODE_SETTINGS_DIR="/mnt/c/Users/$WINDOWS_USER/AppData/Roaming/Code/User"
else
    VSCODE_SETTINGS_DIR="$HOME/.config/Code/User"
fi

# ignore unused variable
# shellcheck disable=SC2034
VSCODE_SETTINGS_FILE="$VSCODE_SETTINGS_DIR/settings.json"

source_if_exists "$HOME/.env"

set +a

# ──────────────────────────────────────────────────────────────
# 🧠 Bash History Cheat Sheet – Rerun & Edit Previous Commands
# ──────────────────────────────────────────────────────────────
# 🔁 Rerun Commands
#   !!             → Rerun last command
#   !n             → Run command number n from `history`
#   !string        → Rerun last command starting with 'string'
#   !^             → First argument of previous command
#   !$             → Last argument of previous command

# ✏️ Modify and Reuse
#   ^old^new       → Replace first 'old' with 'new' in previous command
#   !!:s/old/new/  → Replace first 'old' with 'new'
#   !!:gs/old/new/ → Replace all 'old' with 'new'
#   !n:p           → Print command n without running it
#   fc             → Edit previous command in $EDITOR

# 🔍 History Search
#   Ctrl + r       → Reverse incremental search
#   Ctrl + s       → Forward search (may need `stty -ixon`)
#   Ctrl + g       → Cancel search
#   Esc            → Drop into prompt with matched command

# 🧪 Example
#   $ echo hellp
#   $ ^hellp^hello   → Corrects and reruns as: echo hello
#   $ !ls            → Repeats last command starting with 'ls'

# ──────────────────────────────────────────────────────────────
